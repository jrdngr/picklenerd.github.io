<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>picklenerd - learning-rust</title>
	<link href="https://picklenerd.github.io/tags/learning-rust/atom.xml" rel="self" type="application/atom+xml"/>
	<link href="https://picklenerd.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2017-08-21T23:00:00-04:00</updated>
	<id>https://picklenerd.github.io/tags/learning-rust/atom.xml</id>
	<entry xml:lang="en">
		<title>Learning Rust 10: Learned Rust</title>
		<published>2017-08-21T23:00:00-04:00</published>
		<updated>2017-08-21T23:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/learned-rust/" type="text/html"/>
		<id>https://picklenerd.github.io/learned-rust/</id>
		<content type="html">&lt;p&gt;I took a break from this for a few days.  After having the brilliant idea to rip my systems apart after rebuilding them for the 4th time, I had the even more brilliant idea to undo all of that ripping and go back to when it still compiled.  At some point, I&#x27;ll have to write something new instead of writing the same thing over and over.&lt;&#x2F;p&gt;
&lt;p&gt;So here I am, two months after deciding to tackle Rust and port over my main project.  I&#x27;m feeling pretty confident with Rust at this point, and it has basically poisoned every other part of my life.  My Java code at work is changing, I check the subreddit and forums multiple times every day, and I can&#x27;t even open Unity anymore without feeling like I&#x27;m in the wrong place.&lt;&#x2F;p&gt;
&lt;p&gt;I still want to dump Piston, but I think it&#x27;s the wrong time.  I&#x27;d like to start my dive into graphics programming with Vulkan (I know, shut up) but I need a laptop that supports it first and I&#x27;m not getting one until I can buy a Surface Book 2.  So maybe never.&lt;&#x2F;p&gt;
&lt;p&gt;Other than that, I&#x27;m going to keep chugging along with my plans.  First, I need to tackle the grid manager&#x27;s usability.  It works ok but my creature code is awkward and annoying to write.  I&#x27;m probably going to go back to an enum of standard actions that I&#x27;ll return in a vector rather than having the creatures directly manipulate the grid.  They&#x27;ll probably still have access to it in case I want them to do something wacky to each other, but most of their behavior should be simpler to write.&lt;&#x2F;p&gt;
&lt;p&gt;For example, here&#x27;s my current plant code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plant_action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grid_manager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; GridManager, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;utils::random_percentage(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;95.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
         grid_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_to_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x, y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LAYER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; new_cell_coordinates = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; set_new_cell = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
        {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; neighborhood = grid_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_neighborhood_of_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((x, y), OrganismType::Empty);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; neighborhood.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
                new_cell_coordinates = utils::random_element(neighborhood.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
                set_new_cell = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
            }
        }
        
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; set_new_cell {
            grid_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(new_cell_coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, new_cell_coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;new_plant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
            grid_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_to_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x, y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LAYER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have this problem where getting a neighborhood takes an immutable reference to the manager, so I have to drop the reference before I can set the cell.  Then I do some other really awful things to compensate.  I didn&#x27;t really think about this when I wrote it since I was at peak burnout.  I just wanted it to compile and look pretty when I ran it.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing that bugs me is this fake dynamic dispatch thing that I did.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;act&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grid_manager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; GridManager, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cell_type = None;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(cell) = grid_manager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x, y).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_layer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(layer) {
        cell_type = Some(cell.organism_type);
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(id) = cell_type {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; id {
            OrganismType::Plant =&amp;gt; plant::plant_action(grid_manager, (x, y)),
            OrganismType::Cow   =&amp;gt; cow::cow_action(grid_manager, (x, y)),
            _                   =&amp;gt; {},
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After reading about static and dynamic dispatch, I ended up with this system rather than trait objects with their own act method because I wanted the performance.  Once I actually thought about it, I decided that this is probably just a slower version of regular dynamic dispatch.  Refactoring it into a trait object is kind of a pain so this is a pretty low priority, but it&#x27;s still annoying and will be increasingly annoying as I add more creatures.&lt;&#x2F;p&gt;
&lt;p&gt;Once creature writing is cleaned up, I&#x27;ll write some more creatures that each have a few numerical properties that influence their behavior, then add a rudimentary system of evolution that modifies those properties.  Hopefully, this will produce some interesting results.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I&#x27;ll have to step back from coding and do some serious design work.  I need to figure out how the final evoluton system will actually work.  My main task will be to design an energy system that balances utility vs cost.  Every property that a creature has might have an associated energy ratio that alters its energy cost depending on its value.  So a creature might move more quickly, but it&#x27;s going to lose more energy in the process.  If the property bump is worth the extra energy, it should be more likely to survive.  If I want the idea to be that simple and still produce interesting results, I&#x27;m going to have to be clever with the properties.  Or maybe that system won&#x27;t work at all and I&#x27;ll have to do something entirely different.&lt;&#x2F;p&gt;
&lt;p&gt;And this concludes my little Learning Rust blog series.  This is obviously just a development blog at this point, as the learning pace has slowed down from &amp;quot;holy shit what is happening!&amp;quot; to &amp;quot;this is a thing that I use.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll end with the amazing(ly stupid) lesson I learned tonight.  &lt;code&gt;unwrap&lt;&#x2F;code&gt; is a trap!  &lt;code&gt;if let&lt;&#x2F;code&gt; your &lt;code&gt;Option&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you and goodnight!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 9: Evolution</title>
		<published>2017-08-15T08:00:00-04:00</published>
		<updated>2017-08-15T08:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/evolution/" type="text/html"/>
		<id>https://picklenerd.github.io/evolution/</id>
		<content type="html">&lt;p&gt;This project has been progressing slowly for the past few weeks.  I was losing motivations quickly as this is the fourth or fifth time that I&#x27;ve re-written this same system.  As of Sunday, it finally worked again, and I had my plan rewritten.  Layers are good, grid mutation is good, actions are good.&lt;&#x2F;p&gt;
&lt;p&gt;Then I realized that the evolution system that I&#x27;m working toward probably won&#x27;t fit in to this system very well.  I&#x27;m making a system where I can design creatures with specific behaviors that are dynamically tweaked as they &amp;quot;evolve&amp;quot; the parameters for those behaviors.  I want a system where creatures design themselves and whose behavior is based entirely on a set of parameters.  That&#x27;s going to be a lot more challenging and I still like the first system, so it would be nice to have both.&lt;&#x2F;p&gt;
&lt;p&gt;I decided that grid management should be a trait instead of a struct since this overall grid construct is pretty reusable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;GridManager: IntoIterator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;GridCellType;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;GridCellType;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new_grid_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;GridCellType);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now all of my grid management code is part of OrganismGridManager which implements this trait.  This is a pretty huge change, but I think it should have worked like this from the start.  Working through the process of rewriting exposed some of the areas where strong coupling between systems made everything a pain to change. &lt;&#x2F;p&gt;
&lt;p&gt;Once this is done, I can use my grid system for multiple different things.  For instance, I&#x27;ll be able to make a cellular automata engine fairly easily.&lt;&#x2F;p&gt;
&lt;p&gt;In other news, I think I can stop calling these posts &amp;quot;Learning Rust&amp;quot;.  I&#x27;ll obviously be learning Rust for a long time, but it&#x27;s more of a trickle now.  I&#x27;ll probably make it an even 10 posts and do a wrap-up and summary once my current refactoring project is done, after which this will just be a regular development blog along with some tutorials that cover some of my pain points learning the language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 8: Round Two</title>
		<published>2017-07-31T20:00:00-04:00</published>
		<updated>2017-07-31T20:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/round-2/" type="text/html"/>
		<id>https://picklenerd.github.io/round-2/</id>
		<content type="html">&lt;p&gt;I&#x27;ve spent the last two weeks trying to get layers working.  Instead of a single organism occupying a cell it would occupy a layer within the cell.  The the color of the cell would be that of the topmost cell and each organism would be able to decide whether or not it interacted with other cells.&lt;&#x2F;p&gt;
&lt;p&gt;This would have allowed things like cows walking over grass without eating it.  More importantly, it would have allowed me to have a ground layer simulation that happened separately from the creature layer.  Once evolution was in place, that could make the results a lot more dynamic.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, none of that worked.  Every little change I made propogated errors all over the place.  I basically rewrote the whole thing over and over one error at a time.  And it never compiled.  Not once.&lt;&#x2F;p&gt;
&lt;p&gt;The whole thing was built on shaky ground.  That&#x27;s not much a surprise since this is the first thing I&#x27;ve ever done in Rust.  Why would it be right the first time?&lt;&#x2F;p&gt;
&lt;p&gt;So I deleted everything and I&#x27;m going to do it again.  Parts will be smaller and more independent, and hopefully everything will be designed a little better now that I know what Rust wants from me.&lt;&#x2F;p&gt;
&lt;p&gt;Honestly, there wasn&#x27;t that much code anyway.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 7: Like an Onion</title>
		<published>2017-07-18T22:00:00-04:00</published>
		<updated>2017-07-18T22:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/like-an-onion/" type="text/html"/>
		<id>https://picklenerd.github.io/like-an-onion/</id>
		<content type="html">&lt;p&gt;I started implementing separate layers for the ground and the creatures that walk on top of the ground.  It was a little too specialized and awkward to work with.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, grid cells now have layers.  Each cell has a &lt;code&gt;u8&lt;&#x2F;code&gt; to &lt;code&gt;Organism&lt;&#x2F;code&gt; map representing each layer and the organism that occupies it.  The &lt;code&gt;get_color&lt;&#x2F;code&gt; method now returns the color of the topmost layer, and the ColorEnumerator automatically works correctly because it was already using get_color.&lt;&#x2F;p&gt;
&lt;p&gt;The additions were easy.  The modifications are a bit trickier.  Anything that accesses a cell now needs to specify a layer, and there&#x27;s a lot of code that accesses cells.  Most of the ugliness will be abstracted over at the organism level, but rewriting the main loop and the rest of the backend is taking a while.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t learned much about Rust while working on my project over the past couple days.  I&#x27;m more familiar with &lt;code&gt;HashMap&lt;&#x2F;code&gt; and read up on &lt;code&gt;BTreeMap&lt;&#x2F;code&gt;, but I&#x27;m mostly just restructuring.  I&#x27;m starting to feel pretty nimble with the language now.  I really only bump into two things with any frequency.&lt;&#x2F;p&gt;
&lt;p&gt;The first is just not knowing the interfaces of things in the standard library.  For example, when I&#x27;m calling &lt;code&gt;get&lt;&#x2F;code&gt; on a HashMap, the key argument is supposed to be a reference.  These sorts of things happen often enough that I can usually fix them right when RLS calls them out.&lt;&#x2F;p&gt;
&lt;p&gt;The second is nested method calls.  I think that&#x27;s what you&#x27;d call them.  Calling a method within another method or a loop.  I still occasionally bump into the borrow checker when I do this.  It&#x27;s significantly easier to fix these problems now, but it&#x27;s not second nature yet.&lt;&#x2F;p&gt;
&lt;p&gt;I also started reading the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;&quot;&gt;Rustonomicon&lt;&#x2F;a&gt; this week.  I don&#x27;t think I&#x27;ll be writing any unsafe code for this project, but there are a lot of interesting details about the language in there.  Plus the intro said that there would be type theory so I really couldn&#x27;t stop myself.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 6: Creature Discomfort</title>
		<published>2017-07-15T15:00:00-04:00</published>
		<updated>2017-07-15T15:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/creature-discomfort/" type="text/html"/>
		<id>https://picklenerd.github.io/creature-discomfort/</id>
		<content type="html">&lt;p&gt;I&#x27;m finally settling into a creature design.  I&#x27;ve tried several other setups, but I still like having a generic creature struct with a function pointer for behavior.  It fits well with the two roles that a creature has to fill, storing information about its state, and determining what to do next time it gets a turn.  Any properties specific to that creature are stored in its &lt;code&gt;properties&lt;&#x2F;code&gt; HashMap.&lt;&#x2F;p&gt;
&lt;p&gt;This is how the plant is currently defined.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Creature {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; properties: HashMap&amp;lt;String, Property&amp;gt; = HashMap::new();
    properties.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ENERGY_PER_TICK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), Property::Integer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
    properties.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ENERGY_TO_SPLIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), Property::Integer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;));
    
    Creature {
        creature_type: CreatureType::Plant,
        color: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        energy: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        sleep: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        properties: properties,
        action: plant_action,
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plant_action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myself&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Creature, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neighbors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;Neighbors) -&amp;gt; Vec&amp;lt;Action&amp;gt; {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(energy_per_tick, energy_to_split) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_variables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;myself.properties);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; myself.energy &amp;lt; energy_to_split {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random_percentage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
            myself.energy += energy_per_tick * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random_int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;vec![Action::Idle, Action::Queue(neighbors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())];
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; empty_neighbors = neighbors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;of_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(CreatureType::Empty);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; empty_neighbors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;vec![Action::Idle];
        }
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; new_index = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, empty_neighbors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; new_pos = empty_neighbors[new_index].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

        vec![Action::Set(new_pos, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(CreatureType::Plant)), Action::Queue(neighbors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())]
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_variables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;HashMap&amp;lt;String, Property&amp;gt;) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; energy_per_tick: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; properties.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ENERGY_PER_TICK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
        Some(&amp;amp;Property::Integer(n)) =&amp;gt; n,
        _ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; energy_to_split = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; properties.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ENERGY_PER_TICK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;){
        Some(&amp;amp;Property::Integer(n)) =&amp;gt; n,
        _ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    };

    (energy_per_tick, energy_to_split)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;get_variables&lt;&#x2F;code&gt; is pulled out to keep the action method a bit cleaner.  I think I can come up with a much better way to get these variables.  The main issue is that I don&#x27;t know which &lt;code&gt;Property&lt;&#x2F;code&gt; variation a given property is going to have.  I have two thoughts about this.  One is that I might be able to make a macro that handles this cleanly, but I&#x27;m not ready to dive into macros yet.  The other is to make every property an &lt;code&gt;f64&lt;&#x2F;code&gt;.  The &lt;code&gt;Property&lt;&#x2F;code&gt; enum currently looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Property {
    Integer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
    Decimal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
    Text(String),
    Boolean(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Changing &lt;code&gt;properties&lt;&#x2F;code&gt; from &lt;code&gt;HashMap&amp;lt;String, Property&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;HashMap&amp;lt;String, f64&amp;gt;&lt;&#x2F;code&gt; would make it much easier to deal with property values, and it would pretty much cover every case except for &lt;code&gt;Text&lt;&#x2F;code&gt; which I probably don&#x27;t even need.&lt;&#x2F;p&gt;
&lt;p&gt;In other news, I made my own struct for the turn queue that uses a HashSet to track duplicate entries.  Now it&#x27;ll ignore any &lt;code&gt;push&lt;&#x2F;code&gt; that contains a value that&#x27;s already in the queue.  Works like magic and everything is still lightning fast. Hooray!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;TurnQueue {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: VecDeque&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;element_set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Next up:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Adding a ground layer.  This will be for stuff like plants that creatures can walk on top of without taking their space.  This feature is the main reason I&#x27;m so concerned about performance since it&#x27;s going to double the size of my grid.  It should be cool though.  It&#x27;ll behave just like the existing layer so I&#x27;ll basically have two simulations going at once.  One to determine the landscape and one to determine the action that happens on top of that landscape.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a pretty picture.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;picklenerd.github.io&#x2F;images&#x2F;mlh3.gif&quot; alt=&quot;pretty-picture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 5: The Plan Has Changed.  Nothing is Changing.</title>
		<published>2017-07-13T22:30:00-04:00</published>
		<updated>2017-07-13T22:30:00-04:00</updated>
		<link href="https://picklenerd.github.io/the-plan-has-changed-nothing-is-changing/" type="text/html"/>
		<id>https://picklenerd.github.io/the-plan-has-changed-nothing-is-changing/</id>
		<content type="html">&lt;p&gt;Last night the slowness of my program got to me.  As part of my attempt to speed up rendering, I decided that I&#x27;d switch out &lt;code&gt;piston&lt;&#x2F;code&gt; for &lt;code&gt;gfx-rs&lt;&#x2F;code&gt; early and just do everything directly.  This would probably be a bit slower in the near-term since I don&#x27;t know what I&#x27;m doing, but it would probably be faster in the future since I wouldn&#x27;t have any overhead from stuff in &lt;code&gt;piston&lt;&#x2F;code&gt; that I&#x27;m not taking advantage of.&lt;&#x2F;p&gt;
&lt;p&gt;Then I remembered that I can change the optimization level of the compiler.  Since I hadn&#x27;t done it yet, I maxed it out and ran the program.  It&#x27;s incredibly fast.  So fast that I&#x27;ll have to slow everything down to make it look pretty again.  This shouldn&#x27;t really be a surprise considering how simple this program is at the moment.  I was actually starting to feel disappointed that Rust wasn&#x27;t helping my performace at all.  Now I&#x27;m absolutely thrilled that I managed to get things running in Rust.  This is going to be so awesome.&lt;&#x2F;p&gt;
&lt;p&gt;The other problem I ran into was some obnoxiously complicated code when I tried to add properties to my creatures.  Since creatures are implemented as a struct with a function pointer to their behavior, the behavior isn&#x27;t a method.  Now I have to pass into the function any information about that creature that I want to use, even though conceptually this action is running on the creature.  &lt;em&gt;Now that I&#x27;ve typed this out, I can obviously just pass the creature struct instance.  Duh.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Adding these extra pieces of information to the function meant that I also had to go in and edit all 6 creature files every single time I changed something.  Now part of this is my fault for getting ahead of myself and writing a bunch of creatures, and I think I can just tell the compiler to ignore them.  On the other hand, adding new creatures is supposed to be relatively easy.  That&#x27;s a primary design goal that&#x27;s not changing.&lt;&#x2F;p&gt;
&lt;p&gt;So now I&#x27;m reconsidering the structure of the creatures.  I tried trait objects again, but I ran into the same problems trying to fit them into some of my other code, and I&#x27;m also not thrilled about this dynamic dispatch business that I&#x27;ve been reading about.&lt;&#x2F;p&gt;
&lt;p&gt;For the time being, I&#x27;m going to stick with the struct and try to be a little more clever about how I pass things around.  I also think it&#x27;s time to ask for advice.  Like from a human.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;&#x2F;strong&gt;
Given that I already had this act method wrapping the internal function, this was a 5 second fix.  I didn&#x27;t even get to be clever, but at least I can put off talking to a human for a little while longer.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Creature {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creature_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: CreatureType,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Color,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: HashMap&amp;lt;String, Property&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Creature, &amp;amp;Neighbors) -&amp;gt; Vec&amp;lt;Action&amp;gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Creature {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;act&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;neighbors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;Neighbors) -&amp;gt; Vec&amp;lt;Action&amp;gt; {
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.action)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, neighbors)
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 4: Iterator Quest</title>
		<published>2017-07-12T22:00:00-04:00</published>
		<updated>2017-07-12T22:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/iterator-quest/" type="text/html"/>
		<id>https://picklenerd.github.io/iterator-quest/</id>
		<content type="html">&lt;p&gt;Today I was going to write a proper iterator for my grid.  After rereading the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;&quot;&gt;documentation for iterators&lt;&#x2F;a&gt;, I was feeling pretty confident.  I wrote myself a nice little iterator that wrapped the regular &lt;code&gt;Vec&lt;&#x2F;code&gt; iterator.  Worked like a charm.  I think the reason I was struggling so much before is because of the things I was trying to do within the &lt;code&gt;for&lt;&#x2F;code&gt; loop, not the loop itself.&lt;&#x2F;p&gt;
&lt;p&gt;Of course once I was ready to use my new iterator, I realized that the queue system I use for grid updates completely circumvents the need to loop over each cell&#x27;s creature.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, I do loop over every cell in the render loop.  Previously, I had the grid generate a vector containing just its color information, then pass that to the rendering code.  I wrote another iterator, this time for the color information, and dropped it in to the rendering code without issue.  Woo!&lt;&#x2F;p&gt;
&lt;p&gt;Doing this pointed out how much time I was wasting redrawing each cell during every render pass.  It&#x27;s already starting to slow down when there&#x27;s a lot of action on the screen, so I think it&#x27;s time to replace &lt;code&gt;piston&lt;&#x2F;code&gt; and handle my own graphics.&lt;&#x2F;p&gt;
&lt;p&gt;I had planned on doing this anyway.  I really only used &lt;code&gt;piston&lt;&#x2F;code&gt; to get up and running quickly, and I decided against using &lt;code&gt;conrod&lt;&#x2F;code&gt; for my GUI for the time being.&lt;&#x2F;p&gt;
&lt;p&gt;Originally, I was going to give &lt;code&gt;vulkano&lt;&#x2F;code&gt; a shot because the author is making some really accessible tutorials and my graphics are really simple anyway.  Unfortunately, my old Surface Pro 2 needs beta drivers to run Vulkan, so I would only be able to run it on my desktop.  Maybe in the future!&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I&#x27;m going with &lt;code&gt;gfx-rs&lt;&#x2F;code&gt;.  Hopefully I can get it to be fast enough that I can put off doing any difficult optimization until much later.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;&#x2F;strong&gt; I just did my first build with full compiler optimizations and it&#x27;s blazing fast.  Good to know!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 3: The First Two Weeks</title>
		<published>2017-07-12T19:00:00-04:00</published>
		<updated>2017-07-12T19:00:00-04:00</updated>
		<link href="https://picklenerd.github.io/the-first-two-weeks/" type="text/html"/>
		<id>https://picklenerd.github.io/the-first-two-weeks/</id>
		<content type="html">&lt;p&gt;I intended to write about my experience learning Rust from the beginning, but I was too obsessed with writing the code to stop.  I&#x27;m going to try to recap the past two weeks below.  It&#x27;s long, so here are my main takeaways from this process.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;&quot;&gt;second edition of the book&lt;&#x2F;a&gt; is fantastic.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Winning the fight against the borrow checker isn&#x27;t about nudging things around until your program compiles.  It&#x27;s about designing with the borrow checker in mind from the very start.  I haven&#x27;t done much research on the topic, but I&#x27;m guessing that people with solid experience using functional languages have a lot less trouble than people who only have experience with object-oriented languages purely because of the differences in the way you design your programs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;For&lt;&#x2F;code&gt; loops are hard.  I think this might be a strong bouncing-off point for a lot of people who have programming experience.  It feels like the language is taunting you over something that feels like it should be easy because it&#x27;s so easy in other languages.  Every single one of my extended fights with the borrow checker involved a loop.  I think it&#x27;s the only familiar face that works a bit differently in Rust.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust has the most helpful compiler ever.  I love that it tries to point out the problem using text formatting and colors, AND gives you suggestions about how you might fix the problem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;After reading through the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;&quot;&gt;second edition of the book&lt;&#x2F;a&gt;, I started porting &lt;a href=&quot;http:&#x2F;&#x2F;picklenerd.com&#x2F;mylittlehab&#x2F;&quot;&gt;My Little Habitat&lt;&#x2F;a&gt; over to Rust.  It was in a state where it had its basic functionality but not much else.  For the most part, it was a matter of recreating things that I already knew how to do in the browser over to a new system.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;picklenerd.com&#x2F;mylittlehab-old&#x2F;&quot;&gt;very first version&lt;&#x2F;a&gt; of My Little Habitat was clunky.  It used SVG to render so it was incredibly slow, and all of the code was written in plain Javascript so I could be messy.  When I moved it over to &lt;code&gt;canvas2d&lt;&#x2F;code&gt;, I decided to do it in TypeScript instead.  TypeScript is amazing and it had the added benefit of forcing me to structure everything more carefully.  This was really helpful when I moved over to Rust.  Aside from a little bit of inheritance, most of that structure carried over the Rust pretty well.&lt;&#x2F;p&gt;
&lt;p&gt;I chose to do the graphics using &lt;code&gt;piston&lt;&#x2F;code&gt; to make things easier at the beginning.  I had planned on doing the GUI with &lt;code&gt;conrod&lt;&#x2F;code&gt; so it seemed like the obvious choice.  I&#x27;ll be switching it all out for &lt;code&gt;gfx-rs&lt;&#x2F;code&gt; or &lt;code&gt;vulkano&lt;&#x2F;code&gt; at some point in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Getting colored squares on the screen using my Grid struct was actually pretty easy.  I felt confident about my knowledge of the ownership system and everything just worked out.  Then I started trying to change data stored in the grid and my confidence flew away.&lt;&#x2F;p&gt;
&lt;p&gt;Having essentially copied the algorithm from the TypeScript code, the update loop would iterate over the creatures stored a given Grid cell, then call the creature&#x27;s individual update method.  The update method took a mutable reference to the grid so that it could get any relevant information about its surroundings and set its new state.&lt;&#x2F;p&gt;
&lt;p&gt;This broke in many ways.  Looping over the grid cells borrowed the grid.  This made it difficult to pass the grid as an argument for the creature&#x27;s method.  Creatures themselves were just a &lt;code&gt;trait&lt;&#x2F;code&gt;, so grid cells were trait objects.  Then boxed trait objects.  Then reference counted trait objects.  Then boxed trait objects again.  Having Creatureness be a &lt;code&gt;trait&lt;&#x2F;code&gt; seemed like the right choice since they had unique behaviors and properties that would differ between creatures.  After doing some research, I decided that it maybe wasn&#x27;t the best choice and began to restructure.&lt;&#x2F;p&gt;
&lt;p&gt;Creatures became a &lt;code&gt;struct&lt;&#x2F;code&gt; with a function pointer for the behavior and a map for individual unique properties.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Property {
    Integer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
    Decimal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
    Text(String),
    Boolean(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Creature {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creature_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: CreatureType,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Color,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: HashMap&amp;lt;String, Property&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Neighbors) -&amp;gt; Vec&amp;lt;Action&amp;gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now my grid was just a &lt;code&gt;Vec&amp;lt;Creature&amp;gt;&lt;&#x2F;code&gt; rather than &lt;code&gt;Vec&amp;lt;Box&amp;lt;Creature&amp;gt;&amp;gt;&lt;&#x2F;code&gt;, and it became significantly easier to work with.  I still had trouble with my loops though, and nested borrows of the same object were the culprit.&lt;&#x2F;p&gt;
&lt;p&gt;It didn&#x27;t make much logical sense for an individual creature to have the power to change the whole grid.  Since creating new creature types was supposed to be easy, having a fixed set of general grid operations would solve my problem in addition to simplifying creature logic.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Action {
    Set(Position, Creature),
    Clear(Position),
    Queue(Position),
    QueueNeighbors,
    Idle,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I could return a list of messages and feed those into the grid way back in the update loop.  This worked perfectly. This also worked around another problem I was having, which was iterating over the grid cells.  Since the grid really just wraps a &lt;code&gt;Vec&amp;lt;Creature&amp;gt;&lt;&#x2F;code&gt; with some methods to calculate 2D indices, I tried to build an iterator that essentially wrapped the &lt;code&gt;Vec&lt;&#x2F;code&gt; iterator.  This ended up being a bit of a pain, so I am temporarily looping over indices and pulling the cells from the grid data directly to access their contents.&lt;&#x2F;p&gt;
&lt;p&gt;It worked!  I was finally able to compile the program and watch my plants spread around the grid.  They were weird about it though.  They spread to the bottom-right corner of the graph significantly faster than the other directions.&lt;&#x2F;p&gt;
&lt;p&gt;I actually had this same problem with the web version.  If a plant moved down and&#x2F;or to the right, the loop hit would hit it again as it was evaluated from top-left to bottom-right.  The first version solved this by flagging those cells to be skipped during the same update.  That&#x27;s obviously a terrible way to handle it.  Instead, I added a turn queue.  I store the size of the queue at the beginning of the update, then I loop through the queue to determine which cells run their behavior.  If a cell knows that it&#x27;s going to be active during the following cycle, it tells the grid to queue it back up.  Not only does this run the behaviors in a more organic order, but it also saves me from evaluating behaviors on all of the cells that don&#x27;t do anything.&lt;&#x2F;p&gt;
&lt;p&gt;One caveat is that changing the creature inside a given cell could potentially change the behavior of its neighbor cells on the next cycle.  To correct this, changing a cell&#x27;s creature will also queue up all of its neighbors.  This gives the correct behavior &lt;strong&gt;most&lt;&#x2F;strong&gt; of the time, but it can also result in large bursts of activity in certain areas where neighbors are shared by two changing cells.  Filtering the queue for duplicates would be way too expensive so I&#x27;ll have to figure out a way around this.&lt;&#x2F;p&gt;
&lt;p&gt;So that&#x27;s where I am now.  The program works and it has a few creatures added to it, although they&#x27;re a bit simpler than the TypeScript version since they don&#x27;t have a concept of energy.&lt;&#x2F;p&gt;
&lt;p&gt;Next up:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement creature properties starting with energy.&lt;&#x2F;li&gt;
&lt;li&gt;Write a proper Grid iterator.&lt;&#x2F;li&gt;
&lt;li&gt;Consider replacing HashMap&amp;lt;String, Property&amp;gt; with HashMap&amp;lt;String, f64&amp;gt; since this will probably cover all properties.&lt;&#x2F;li&gt;
&lt;li&gt;Look at ways to deal with queue blobs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 2: The Project</title>
		<published>2017-07-12T08:25:00-04:00</published>
		<updated>2017-07-12T08:25:00-04:00</updated>
		<link href="https://picklenerd.github.io/my-little-hab/" type="text/html"/>
		<id>https://picklenerd.github.io/my-little-hab/</id>
		<content type="html">&lt;p&gt;The project I&#x27;m building in Rust is something I&#x27;ve been wanting to make for a long time.  It&#x27;s a graphical grid-based life simulator.  You can play with the most recent web version &lt;a href=&quot;http:&#x2F;&#x2F;picklenerd.com&#x2F;mylittlehab&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.  Pick a creature on the right and draw with it in the box on the left.&lt;&#x2F;p&gt;
&lt;p&gt;I started with a web version so that it could be widely accessible and people definitely seem to enjoy the early versions, but I&#x27;m already running into performance issues and there are a lot of features that I&#x27;d like to implement that will bog it down even more, which is why I&#x27;m focusing on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;picklenerd&#x2F;my-little-habitat&quot;&gt;Rust version&lt;&#x2F;a&gt; first.  I&#x27;d like to port what I can back to the web eventually.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the features that will eventually be added are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Variable properties that are used in creature behaviors.  Some of these will have associated energy&#x2F;unit costs and will vary slightly between generations so that creatures can evolve.&lt;&#x2F;li&gt;
&lt;li&gt;The ability to inspect a single creature to see its properties and other stats.&lt;&#x2F;li&gt;
&lt;li&gt;Customizable creatures along with a small scripting language to define their behaviors.&lt;&#x2F;li&gt;
&lt;li&gt;A ground layer that follows the same rules.  This would allow dynamic environments to form and could shape creature behavior in interesting ways.&lt;&#x2F;li&gt;
&lt;li&gt;Speed controls, possibly including the ability to reverse time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some of these features will also migrate to the Typescript version in the future, and customized creatures will be determined by a common text format that will be portable between the two systems.&lt;&#x2F;p&gt;
&lt;p&gt;The overall goal here is to build a system that lets me build systems.  I like watching complex group behavior develop out of simple individual behaviors.  My favorite example is the Parasite creature in the &lt;a href=&quot;http:&#x2F;&#x2F;picklenerd.com&#x2F;mylittlehab&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;.  Their logic is similar to Plant logic with a few small changes.  Plants will simply spread into nearby empty spaces if there are any available.  Parasites will spread into nearby Plant spaces if they&#x27;re available.  The only differences are that Parasites spread a bit more slowly than plants, and Parasites have neighborhood population limits.  If a Parasite has more than 4 Parasite neighbors, they&#x27;ll start to die.&lt;&#x2F;p&gt;
&lt;p&gt;Since Parasites leave behind empty space as they die from overpopulation and since Parasites can&#x27;t spread into empty space, they end up spreading out into a ring.  These rings will occasionally have thin enough walls that a plant can slip inside.  Since the Plant spreads faster than the Parasite, it starts growing inside the ring.  This gives the inner Parasites something to eat, so they start following the Plants.  This turns into a neat animation in the middle of the ring.  I like to think of it as a farm that the Parasites are building to feed themselves.&lt;&#x2F;p&gt;
&lt;p&gt;![parasites][https:&#x2F;&#x2F;picklenerd.github.io&#x2F;images&#x2F;mlh2.gif]&lt;&#x2F;p&gt;
&lt;p&gt;This little farm gives Parasites a renewable food source and makes it possible for more Parasites to exist at one time.  They also tend to be isolated in the middle of a bunch of empty space.  Since Herbivores can only eat Plants and die without food, it&#x27;s very difficult for them to reach these Parasite farms.  So not only are the Parasites growing their own food, but their food source is well protected against rival species.&lt;&#x2F;p&gt;
&lt;p&gt;And that all just happened.  Nothing was designed to work that way.  You can see just how successful this Parasite farming behavior is over long periods of time.  Using the &lt;a href=&quot;http:&#x2F;&#x2F;picklenerd.com&#x2F;mylittlehab&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt;, put down a Plant in the middle of the grid, then put a Parasite in the middle of the growing Plant blob.  Once the farm starts forming, place an Herbivore (or a bunch) around the outside of the ring.  Then just let it go.  The Herbivores will cause the ring to break, but the farms keep going and the Herbivores can&#x27;t survive in the middle of the grid, while the Parasites dominate it.  Cool!&lt;&#x2F;p&gt;
&lt;p&gt;![parasites][https:&#x2F;&#x2F;picklenerd.github.io&#x2F;images&#x2F;mlh1.gif]&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Learning Rust 1: Intro</title>
		<published>2017-07-11T21:56:00-04:00</published>
		<updated>2017-07-11T21:56:00-04:00</updated>
		<link href="https://picklenerd.github.io/learning-rust-intro/" type="text/html"/>
		<id>https://picklenerd.github.io/learning-rust-intro/</id>
		<content type="html">&lt;p&gt;I have this little &lt;a href=&quot;http:&#x2F;&#x2F;picklenerd.com&#x2F;mylittlehab&#x2F;&quot;&gt;pet project&lt;&#x2F;a&gt; that I&#x27;ve been thinking about for years.  I finally started working on it a few months ago, first in plain Javascript, then in Typescript.  Once the basics were in place, it seemed pretty unlikely that a web browser was going to be able to handle everything I wanted to do.&lt;&#x2F;p&gt;
&lt;p&gt;And so I decided that it was finally time to learn Rust.  I read the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;first-edition&#x2F;&quot;&gt;old book&lt;&#x2F;a&gt; late last year and I loved the ideas behind the whole language but I got bored working through the learning resources I found online.  After reading about &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2017&#x2F;06&#x2F;27&#x2F;Increasing-Rusts-Reach.html&quot;&gt;Increasing Rust&#x27;s Reach&lt;&#x2F;a&gt;, I got motivated to try again.  This time, I had the ridiculously awesome &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;&quot;&gt;new book&lt;&#x2F;a&gt; and a project to work on.  Given the Rust team&#x27;s efforts to make the language easier to learn, I wanted to document the learning process from the beginning.  It&#x27;s two weeks past the beginning now so I&#x27;ll have to catch up a bit.&lt;&#x2F;p&gt;
&lt;p&gt;Now I&#x27;m going to add some Jekyll &lt;code&gt;features&lt;&#x2F;code&gt; to this post so that I don&#x27;t have to look them up in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s something I did that feels silly and maybe wrong.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Property {
    Integer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
    Decimal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
    Text(String),
    Boolean(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;),
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Creature {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: HashMap&amp;lt;String, Property&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I want my creatures to have arbitrary properties that can be modified over time.  I also want to implement creatures as a struct and not a trait so that I don&#x27;t have to deal with trait objects.  This was the most obvious solution.  I haven&#x27;t actually used it in practice yet so maybe it won&#x27;t work out, but I still love that this is a thing that I can do, even if it&#x27;s wrong.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
